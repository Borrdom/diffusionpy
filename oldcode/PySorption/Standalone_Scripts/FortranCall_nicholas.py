import os 
from os.path import join
import subprocess
from subprocess import PIPE,STDOUT
import numpy as np

cwd=os.getcwd()
folderofSAFT="e-Dipol_PC-SAFT_DoppelT_kij(T)_KOMI mit JC_copol_D"
pathtoSAFT="C:\BÃ¶ttcherPCSAFT"
pathsaft=join(pathtoSAFT,folderofSAFT)

        
def SetupInputVector(T,p,*args):
    """Returns a Maxtrix of the given Inputs for the input textfile. T, p can also be scalar and will be scaled to the other args. Args serve as additional inputs e.g concentrations x1,x2..."""
    if  hasattr(T, "__len__"):
        Tvec=T
    else:
        Tvec=np.ones_like(args[0])*T
    if  hasattr(p, "__len__"):
        pvec=p
    else:
        pvec=np.ones_like(args[0])*p
    x=[]
    x.extend((Tvec,pvec,*args))
    return x

def SetupComponentStr(*args):
    """Generates the componentstrings for for filenames and inputs where args is a list of components strings"""
    return "\n".join(args), "_".join(args)+".txt"
    

def PCSAFTCall(pathsaft,inputstr):
    """Communicates with Fortran PCSAFT over the executable"""
    pathcall=join(pathsaft,"Debug","PCSAFT.exe")
    comm = subprocess.Popen(pathcall, stdout=PIPE, stdin=PIPE, stderr=STDOUT)  
    try:
        grep_stdout = comm.communicate(input=inputstr.encode("utf-8") + b" ")[0]
    except:
        grep_stdout="PCSAFT.exe not found"
    return grep_stdout

def PCSAFT(compstr,nameinput,nameoutput,inputvec,routine=4):
    """Calls PCSAFT and returns the output of the executable as well as the contents of a generated textfile"""
    routinestr=str(routine)+"\n"+'2\n' # enters 4 to access PC-SAFT routine 4 and then enters 2 to write components manualy 
    inputstr=routinestr+compstr+"\nx\n" # enters the components and finally enters x to start calculations
    
    matinp=np.vstack(inputvec).transpose()
    pathinp=join(pathsaft,"input_file",nameinput)
    np.savetxt(pathinp,matinp,fmt='%.6f') #generates and input textfile which can be read within the PC-SAFT routine

    #Open PCSAFT.exe
    report=PCSAFTCall(pathsaft,inputstr)
    print(report)
    #Read a Textfile which might be generated by the executable
    pathout=join(pathsaft,"output_file",nameoutput)
    return report,np.loadtxt(pathout,skiprows=2)

    

if __name__=="__main__":
    x1=np.linspace(0,1,100)
    x2=1-x1
    T=298.15
    p=1E5
    comps=["water","ethanol"]

    compstr,nameinput=SetupComponentStr(*comps)
    inputvec=SetupInputVector(T,p,x1,x2)
    nameoutput="pvt.dat"
    report,output=PCSAFT(compstr,nameinput,nameoutput,inputvec,routine=9)
    firstcolumn=output[:,0]