from numba import njit
import numpy as np

@njit(['Tuple((i8,i8,f8[:,::1],f8[::1]))(i8)'],cache=True)
def collocation_matrices(nz_1):
    nP=4
    nP=2
    nP=3
    nP=2
    # nP=5
    nE=(nz_1-1)//(nP-1)
    # NS=[0.0, 0.2928932188134524, 0.7071067811865476, 1.0]
    # S=[[-5.828427124746187, 8.242640687119275, -3.414213562373087, 0.9999999999999973], [-1.4142135623730971, -0.41421356237309154, 2.414213562373092, -0.5857864376269044], [0.5857864376269034, -2.4142135623730896, 0.414213562373088, 1.4142135623730976], [-0.9999999999999956, 3.414213562373087, -8.242640687119275, 5.828427124746187]]
    S=[[-1.,1.],[-1.,1.]]
    NS=[0.,1.]
    # NS=[0.0, 0.5, 1.0]
    # S=[[-3.0, 4.0, -1.0], [-1.0, 0.0, 1.0], [1.0, -4.0, 3.0]]
    # S=[[-6.5395375879962145, 10.061416435370653, -4.600510143711965, 1.2084878521439109, -0.12985655580640643], [-1.5819767068692774, -1.4367492169390943, 3.6769743039405682, -0.7281502458386651, 0.06990186570648914], [0.8515790568112862, -4.328810898082833, 2.000000000000109, 1.592480534123506, -0.11524869285191049], [-1.404016504647432, 5.380343014951867, -9.995052434112738, 5.436749216939184, 0.5819767068693127], [7.0899277167048895, -24.273127375459666, 33.99342753558555, -27.349765464826607, 10.53953758799615]]
    S=[[-2.1234707894061233, 2.4764575053609614, -0.3529867159548379], [-1.5819767068693262, 1.0000000000000009, 0.5819767068693262], [2.608238646367598, -6.731709435773721, 4.123470789406124]]
    NS=[0.0, 0.5, 1.0]

    S=[[-0.5819767068693265, 0.5819767068693265], [-1.5819767068693265, 1.5819767068693265]]
    NS=[0.0, 1.0]
    # NS=[0.0, 0.25, 0.5, 0.75, 1.0]
    # S=[[-11.678206258747934, 20.70386795479874, -18.333553696781337, 16.39781971743514, -7.089927716704437], [-1.3201990250694249, -2.981778751843959, 7.53904202668126, -5.481697995559616, 2.2446337457917958], [0.2136900545211511, -1.3780529360988296, -2.000000000000434, 4.743330682219098, -1.5789678006410044], [-0.08825493961140973, 0.46267933361394953, -2.1902750822723025, -1.0182212481563409, 2.834071936426088], [0.1298565558064645, -0.6447326169070433, 2.4811766822883516, -9.644506879936397, 7.678206258748568]]
    return nP,nE,np.asarray(S),np.asarray(NS)

@njit(['f8[::1](f8[::1],f8[:,::1],i8,i8)'],cache=True)
def collocation_forward(x,S,nE,nP):
    dx=np.zeros_like(x)
    for i in range(nE):
        P0=i*(nP-1)
        P8=(i+1)*(nP-1)+1
        xP=x[P0:P8]
        if i==0: dxP_=np.zeros_like(xP)
        dxP=S@xP
        if i>0: dxP[0]=dxP_[-1]
        dx[P0:P8]=dxP
        dxP_=dxP
    return dx
@njit(['f8[::1](f8[::1],f8[:,::1],i8,i8)'],cache=True)
def collocation_backward(x,S,nE,nP):
    dx=np.zeros_like(x)
    for i in range(nE-1,-1,-1):
        P0=i*(nP-1)
        P8=(i+1)*(nP-1)+1
        xP=x[P0:P8]
        if i==(nE-1): dxP_=np.zeros_like(xP)
        dxP=S@xP
        if i<(nE-1): dxP[-1]=dxP_[0]
        dx[P0:P8]=dxP
        dxP_=dxP
    return dx

@njit(['f8[::1](f8[::1],i8,b1)'],cache=True)
def collocation(x,nz_1,forward):
    nP,nE,S,NS=collocation_matrices(nz_1)
    if forward:
        return collocation_forward(x,S,nE,nP)
    else:
        return collocation_backward(x,S,nE,nP)

@njit(['Tuple((f8[::1],i8))(i8)'],cache=True)
def collocation_space(nz_1):
    nP,nE,S,NS=collocation_matrices(nz_1)
    z=np.asarray([0.])
    zE=np.linspace(0,1,nE+1)
    for i in range(nE):
        z0=zE[i]
        z8=zE[i+1]
        zP=NS*(z8-z0)+z0
        z=np.hstack((z,zP[1:]))
    return z,nE 
